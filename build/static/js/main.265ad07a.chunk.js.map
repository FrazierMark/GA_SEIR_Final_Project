{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","components/Logo/Logo.jsx","components/Navbar/Navbar.jsx","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/3DMap/Light.jsx","utils/tilesApi.js","components/3DMap/WaveShaderMaterial.jsx","components/3DMap/testPlane.jsx","components/2DMap/2DMap.jsx","pages/Locations/Locations.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","tokenService","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","userService","signup","fetch","method","body","then","res","ok","json","Error","logout","login","creds","headers","Headers","stringify","getUser","styled","svg","Navbar","handleLogout","to","src","alt","onClick","email","SignUpPage","navigate","useNavigate","useState","setError","username","password","passwordConf","bio","state","setState","e","preventDefault","handleSignUpOrLogin","console","log","message","handleChange","target","name","value","Grid","textAlign","style","height","verticalAlign","Column","Form","autoComplete","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Button","LoginPage","Light","getPngTile","longitude","latitude","zoom","lon2tile","lat2tile","lat","Math","floor","tan","PI","cos","pow","lon","tilefromlon","abs","tilefromlat","apiRequestData","axios","get","process","responseType","imageBlob","data","URL","createObjectURL","WaveShaderMaterial","shaderMaterial","uTime","uColor","THREE","uTexture","extend","rgbToHeight","r","g","b","Plane","lng","ref","useRef","setPixelArray","setPlaneSize","meshGeometry","setMeshGeometry","setPngData","update","setUpdate","createElevationGrid","newImage","getPixels","imageData","planeSize","sqrt","length","pixelArray","Array","from","heightData","i","push","ratio","max","apply","customPlaneGeometry","arr1","attributes","position","count","fill","forEach","a","index","setZ","useEffect","tempLng","Number","tempLat","camera","geometry","rotation","side","wireframe","object","OrbitControls","dampingFactor","enableDamping","Sky","azimuth","turbidity","rayleigh","inclination","distance","mapboxgl","accessToken","GeoMap","mapContainer","setLng","setLat","setZoom","map","Map","container","current","center","pitch","tileSize","addControl","NavigationControl","MapboxGeocoder","on","getCenter","toFixed","getZoom","addLayer","id","paint","setFog","range","color","once","remove","Locations","App","setUser","path","element","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.265ad07a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n  if (token) {\n    // localStorage is given to us by the browser\n    localStorage.setItem(\"token\", token);\n  } else {\n    localStorage.removeItem(\"token\");\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem(\"token\");\n  if (token) {\n    // Check if expired, remove if it is\n    // atob is a function that decodes a base-64 string\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem(\"token\");\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem(\"token\");\n}\n\nconst tokenService = {\n  setToken,\n  getToken,\n  removeToken,\n  getUserFromToken,\n};\n\nexport default tokenService;\n","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/users/\";\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo\nfunction signup(user) {\n  return (\n    fetch(BASE_URL + \"signup\", {\n      method: \"POST\",\n      body: user,\n    })\n      .then((res) => {\n        if (res.ok) return res.json();\n        // Probably a duplicate email\n        throw new Error(\"Email already taken!\");\n      })\n      // Parameter destructuring!\n      .then(({ token }) => tokenService.setToken(token))\n  );\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + \"login\", {\n    method: \"POST\",\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\n    body: JSON.stringify(creds),\n  })\n    .then((res) => {\n      // Valid login if we have a status of 2xx (res.ok)\n      if (res.ok) return res.json();\n      throw new Error(\"Bad Credentials!\");\n    })\n    .then(({ token }) => tokenService.setToken(token));\n}\n\nconst userService = {\n  signup,\n  logout,\n  login,\n  getUser,\n};\n\nexport default userService;\n","import styled from 'styled-components'\n\nexport const Image = styled.svg`\n  color: grey;\n  position: relative;\n  margin: .4rem;\n  width: 7%;\n  height: 7%;\n  scroll-behavior: smooth;\n  & g.skin {\n    cursor: pointer;\n  }\n`\n\n\nexport function SvgRocket() {\n  return (\n    <Image viewBox=\"0 0 29 29\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <g className=\"skin\">\n        <path d=\"M14.496 21H9.564l1.014 2h2.904l1.014-2zm1.811-17.238C14.9 2.409 13.228 2.465 11.995 0c-1.245 2.489-2.988 2.359-4.38 3.7C3.591 7.572 6.442 15.101 9.012 20h5.977c2.57-4.899 5.443-12.269 1.318-16.238zM12 13a3 3 0 110-6 3 3 0 010 6zm1.5-3c0 .827-.673 1.5-1.5 1.5s-1.5-.673-1.5-1.5.673-1.5 1.5-1.5 1.5.673 1.5 1.5zM4.699 22.594c.097.31.411 1.406.411 1.406H3.834s-.801-1.271-1.418-2.368C2.132 21.127 2 20.726 2 20.35c0-.736.507-1.372 1.375-2.483l1.591-2.058a39.107 39.107 0 001.854 4.284c-.36.212-.975.578-1.27.773-.634.418-1.126.847-.851 1.728zM22 20.349c0 .376-.132.778-.416 1.283C20.967 22.729 20.166 24 20.166 24h-1.275s.312-1.096.41-1.406c.275-.881-.217-1.31-.85-1.729-.296-.195-.91-.56-1.271-.772a39.44 39.44 0 001.859-4.276l1.585 2.05c.869 1.11 1.376 1.746 1.376 2.482z\"></path>\n      </g>\n    </Image>\n  );\n}\n","import React from \"react\";\nimport { SvgRocket } from \"../Logo/Logo\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nfunction Navbar({ user, handleLogout }) {\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">\n        <img\n          className=\"nav__logo\"\n          src=\"https://i.imgur.com/ic7njgq.png\"\n          alt=\"landscape terrain logo\"\n        />\n      </Link>\n\n      <div className=\"nav__nav\">\n        <Link to={!user && \"/login\"}>\n          <div onClick={handleLogout} className=\"nav__option\">\n            <span className=\"nav__optionLineOne\">\n              {!user ? \"Guest\" : user.email}\n            </span>\n            <span className=\"nav__optionLineTwo\">\n              {user ? \"Sign Out\" : \"Sign In\"}\n            </span>\n          </div>\n        </Link>\n\n        {!user ? (\n          \"\"\n        ) : (\n          <Link to=\"/locations\">\n            <div className=\"nav__option\">\n              <span className=\"nav__optionLineOne\"> My Locations</span>\n            </div>\n          </Link>\n        )}\n\n        <Link to=\"/signup\">\n          <div className=\"nav__option\">\n            <span className=\"nav__optionLineOne\"> or Sign Up</span>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport { Button, Form, Grid, Header, Image, Segment } from \"semantic-ui-react\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate } from \"react-router-dom\";\nimport Navbar from \"../../components/Navbar/Navbar\";\n\nexport default function SignUpPage(props) {\n  const navigate = useNavigate();\n\n  const [error, setError] = useState(\"\");\n  const [state, setState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConf: \"\",\n    bio: \"\",\n  });\n\n  //const [selectedFile, setSelectedFile] = useState(\"\");\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Create form Data, because we're sending a multipart/formData request,\n    // because we are sending over multiple requests, because we're uploading a photo!\n    // const formData = new FormData(); // new FormData is from the browser\n    // formData.append(\"photo\", selectedFile);\n\n    // wrote way of appending each key value pair to form Data\n    // formData.append('username', state.username);\n    // formData.append('email', state.email);\n\n    // for (let fieldName in state) {\n    //   formData.append(fieldName, state[fieldName]);\n    // }\n\n    // console.log(formData, \" <- formData\") // <- this doesn't allow you to look at the formdData object\n    // console.log(formData.forEach((item) => console.log(item))); // <- to look at the keys, you must forEach over it\n\n    try {\n      await userService.signup(state); // <- we must pass the argument as formData when we have a\n      // photo\n      props.handleSignUpOrLogin(); // <- this will decode the token from local storage\n      // that we just recieved as a respone to our userService.signup fetch call,\n      // and decode and update the state in our App component\n      navigate(\"/\");\n    } catch (err) {\n      console.log(err.message);\n      setError(err.message);\n    }\n  }\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n\n  return (\n    <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\n      <Grid.Column >\n        <Navbar user={props.user} />\n        <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"username\"\n              placeholder=\"username\"\n              value={state.username}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              value={state.email}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              value={state.password}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              name=\"passwordConf\"\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={state.passwordConf}\n              onChange={handleChange}\n              required\n            />\n                        \n            <Button type=\"submit\" className=\"btn\">\n              Signup\n            </Button>\n          </Segment>\n          {error ? <ErrorMessage error={error} /> : null}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\n\nexport default function LoginPage(props) {\n  return (\n    <>\n      <h1>Setup Login Page</h1>\n      <ul>\n        <li>Read the Login Model, You can change it to fit your needs</li>\n        <li>\n          Make sure you read the Login func in the User Controller, to know how\n          it is setup to find the user!\n        </li>\n      </ul>\n    </>\n  );\n}\n","import { Plane, useHelper } from '@react-three/drei'\n\nimport { useControls } from 'leva'\nimport React, { Suspense, useRef } from 'react'\nimport * as THREE from 'three'\n\nfunction Light() {\n\n\n    const lightProps = {\n        color: 'white',\n        intensity: 100,\n        position: [5, 45, 5],\n        distance: 35,\n        anglePower: 20,\n        attenuation: 2,\n    }\n    const mainLightRef = useRef()\n    useHelper(mainLightRef, THREE.SpotLightHelper, 'red')\n\n    return (\n        <>\n            <ambientLight color=\"white\" intensity={.4} />\n            <spotLight ref={mainLightRef} castShadow={true} shadow-mapSize-height={512} shadow-mapSize-width={512} {...lightProps} />\n        </>\n    )\n}\n\nexport default Light","import axios from 'axios'\nimport React, { useEffect } from \"react\"\n\n\nconst accessToken = process.env.REACT_APP_MAPBOXGL_TOKEN;\n\n\nexport const getPngTile = async (longitude, latitude, zoom) => {\n\n    // From - https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_(JavaScript/ActionScript,_etc.)\n    function lon2tile(lon, zoom) { return (Math.floor((lon + 180) / 360 * Math.pow(2, zoom))); }\n    function lat2tile(lat, zoom) { return (Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom))); }\n\n\n    const tilefromlon = Math.abs(lon2tile(longitude, zoom))\n    const tilefromlat = Math.abs(lat2tile(latitude, zoom))\n\n    const apiRequestData = [tilefromlon, tilefromlat]\n    console.log(apiRequestData)\n\n\n\n    let imageBlob;\n    try {\n        imageBlob = (\n            await axios.get(\n                `https://api.mapbox.com/v4/mapbox.terrain-rgb/${zoom}/${tilefromlon}/${tilefromlat}.png?access_token=${accessToken}`,\n                { responseType: \"blob\" }\n            )\n        ).data;\n    } catch (err) {\n        return null;\n    }\n    return URL.createObjectURL(imageBlob);\n}\n\n    // return axios.get(`https://api.mapbox.com/v4/mapbox.terrain-rgb/${zoom}/${apiRequestData[0]}/${apiRequestData[1]}.png?access_token=${accessToken}`, {\n    //   responseType: 'arraybuffer'\n    // })\n    // .then(response => Buffer.from(response.data, 'binary').toString('base64'))\n\n\n\n// `https://api.mapbox.com/v4/mapbox.terrain-rgb/12/-1211/1569.png?access_token=pk.eyJ1IjoiZnJhemllcm1hcmsiLCJhIjoiY2wzOTBhZzJiMDFwejNqbzJyMGs0YmZ5NCJ9.2VB9C63HoxzjCpCmbhga9A`\n//  https://api.mapbox.com/v4/mapbox.terrain-rgb/8/-76/98.png?access_token=pk.eyJ1IjoiZnJhemllcm1hcmsiLCJhIjoiY2wzOTBhZzJiMDFwejNqbzJyMGs0YmZ5NCJ9.2VB9C63HoxzjCpCmbhga9A\n\n// \"https://api.mapbox.com/v4/mapbox.terrain-rgb/18/456.57/301.04@2x.pngraw?access_token=pk.eyJ1IjoiZnJhemllcm1hcmsiLCJhIjoiY2wzOTBhZzJiMDFwejNqbzJyMGs0YmZ5NCJ9.2VB9C63HoxzjCpCmbhga9A\"\n\n// curl \"https://api.mapbox.com/v4/mapbox.terrain-rgb/10/285/386.png?access_token=pk.eyJ1IjoiZnJhemllcm1hcmsiLCJhIjoiY2wzOTBhZzJiMDFwejNqbzJyMGs0YmZ5NCJ9.2VB9C63HoxzjCpCmbhga9A\" --output test.png\n\n\n","import * as THREE from \"three\";\nimport React, { useRef } from \"react\";\nimport { useFrame, useLoader } from \"@react-three/fiber\";\nimport { extend } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport glsl from \"babel-plugin-glsl/macro\";\n\nconst WaveShaderMaterial = shaderMaterial(\n  // ---  Uniform ------\n  // Provide a way to send data from Javascript to our shader\n  // Uniforms used in both Vertex and Fragment shaders\n  // Able to pass mouse position data, time info, colors, textures, ect...\n  {\n    uTime: 0,\n    uColor: new THREE.Color(0.0, 0.0, 0.0),\n    uTexture: new THREE.Texture(),\n  },\n\n  // ---- Vertex Shader ----\n  // Vertex shader runs first, it receieves attributes, calculates/manipulates\n  // the position of each individual vertex. Position the vertices of the geometry\n\n  glsl`\n    // Allows us to determine how much precision GPU uses\n    precision mediump float;\n\n    //varying allows us to transmit info from vertex shader to the fragment shader\n    varying vec2 vUv;\n    varying float vWave;\n    uniform float uTime;\n\n    //snoise3 function from pragma....\n    #pragma glslify: snoise3 = require(glsl-noise/simplex/3d);\n    void main() {\n        // uv coordinates or uv mapping\n      vUv = uv;\n      vec3 pos = position;\n      float noiseFreq = 2.0;\n      float noiseAmp = 0.32;\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n      pos.z += snoise3(noisePos) * noiseAmp;\n      vWave = pos.z;\n\n      // gl_position eventually will contain all vertex information\n      // modelMatrix - allpys all transformations related to our mesh, ie. scale, rotation, movement\n      // viewMatrix - applys all of the transformations related to the camera, camera movement, rotations, zoom...\n      // projectionMatrix - transforms all collected coordinates and displays final clip space\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \n    }\n  `,\n\n\n  // ----- Fragment Shader ------\n  // Fragment or (pixel) shader runs after vertex; it sets the color of each individual\n  // \"fragment\" of the geometry\n\n  glsl`\n    precision mediump float;\n    uniform vec3 uColor;\n    uniform float uTime;\n    uniform sampler2D uTexture;\n    varying vec2 vUv;\n    varying float vWave;\n    void main() {\n        float wave = vWave * 0.2;\n        // Split each texture color vector\n        float r = texture2D(uTexture, vUv).r;\n        float g = texture2D(uTexture, vUv).g;\n        float b = texture2D(uTexture, vUv + wave).b;\n      vec3 texture = vec3(r, g, b);\n      // vec4 can be (r, g, b, a) or  (a, y, z, w)\n      // texture is a vec3 + 1.0 which equals a vec4\n      gl_FragColor = vec4(texture, 1.0); \n    }\n  `\n);\n\n// allows us to use this glsl shader as a jsx component\nextend({ WaveShaderMaterial });\n\n\n\nconst Wave = () => {\n  const ref = useRef();\n  useFrame(({ clock }) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const [image] = useLoader(THREE.TextureLoader, [\n    \"assets/HOME.png\",\n  ]);\n\n  return (\n    <mesh>\n      <planeBufferGeometry args={[3.9, 3.6, 20, 20]} />\n      <waveShaderMaterial uColor={\"hotpink\"} ref={ref} uTexture={image} />\n    </mesh>\n  );\n};\n\nexport default Wave","import React, { useEffect, useRef, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { OrbitControls, Sky } from \"@react-three/drei\";\nimport Light from \"./Light\";\nimport { getPixels } from \"just-give-me-the-pixels\";\nimport { getPngTile } from \"../../utils/tilesApi\";\nimport Wave from \"./WaveShaderMaterial\";\n\n// From - https://docs.mapbox.com/data/tilesets/guides/access-elevation-data/\nconst rgbToHeight = (r, g, b) => {\n  return -10000 + (r * 256 * 256 + g * 256 + b) * 0.1;\n};\n\nconst Plane = ({ lng, lat, zoom }) => {\n  const ref = useRef();\n  const [pixelArray, setPixelArray] = useState([]);\n  const [planeSize, setPlaneSize] = useState();\n  const [meshGeometry, setMeshGeometry] = useState();\n  const [heightData, setHeightData] = useState([]);\n  const [pngData, setPngData] = useState();\n  const [update, setUpdate] = useState([]);\n\n  const handleClick = () => {\n    console.log(\"Update Geometry!\");\n    const tempLng = Number(lng);\n    const tempLat = Number(lat);\n    setUpdate(getPngTile(tempLng, tempLat, zoom));\n  };\n\n  const createElevationGrid = async () => {\n    const newImage = await getPngTile(lng, lat, zoom);\n    setPngData(newImage);\n\n    const imageData = await getPixels(newImage);\n    const planeSize = Math.sqrt(imageData.data.length / 4);\n    setPlaneSize(planeSize);\n    const pixelArray = Array.from(imageData.data);\n    setPixelArray(pixelArray);\n\n    let heightData = [];\n    for (let i = 0; i < pixelArray.length; i += 4) {\n      const r = pixelArray[i + 0];\n      const g = pixelArray[i + 1];\n      const b = pixelArray[i + 2];\n      const height = rgbToHeight(r, g, b);\n      heightData.push(height);\n    }\n    // used to normalize data between all elevation levels\n    const ratio = Math.max.apply(Math, heightData) / 80;\n    console.log(ratio);\n\n    const customPlaneGeometry = new THREE.PlaneBufferGeometry(\n      256,\n      256,\n      planeSize - 1,\n      planeSize - 1\n    );\n\n    //Put HeightData into mesh\n    const arr1 = new Array(customPlaneGeometry.attributes.position.count);\n    const arr = arr1.fill(1);\n    arr.forEach((a, index) => {\n      customPlaneGeometry.attributes.position.setZ(\n        index,\n        heightData[index] / ratio\n      );\n    });\n\n    setMeshGeometry(customPlaneGeometry);\n    //customPlaneGeometry.attributes.position.needsUpdate = true;\n  };\n\n  useEffect(() => {\n    createElevationGrid();\n    // rerenders on change....\n  }, [update]);\n\n  return (\n    <>\n      <button className=\"generate_button\" onClick={handleClick}>Generate New 3D Terrrain</button>\n      <Canvas className=\"canvas\" camera={{ position: [0, 230, 295] }}>\n        <mesh\n          geometry={meshGeometry}\n          position={[60, -70, 0]}\n          rotation={[4.64, 0, 0]}\n        >\n          <waveShaderMaterial\n            uColor={\"hotpink\"}\n            ref={ref}\n            side={THREE.DoubleSide}\n            wireframe={true}\n            // uTexture={\"sometexure to get to work\"}\n          />\n        </mesh>\n        <primitive object={new THREE.AxesHelper(10)} />\n        {/* <Light /> */}\n        <OrbitControls dampingFactor={0.5} enableDamping=\"true\" />\n        <Sky\n          azimuth={0.1}\n          turbidity={10}\n          rayleigh={0.5}\n          inclination={0.6}\n          distance={1000}\n        />\n      </Canvas>\n    </>\n  );\n};\n\nexport default Plane;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Plane from \"../3DMap/testPlane\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport Navbar from \"../Navbar/Navbar\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOXGL_TOKEN;\n\nconst GeoMap = () => {\n  const mapContainer = useRef();\n  const [lng, setLng] = useState(-90.00129);\n  const [lat, setLat] = useState(35.1797);\n  const [zoom, setZoom] = useState(13);\n\n  useEffect(() => {\n    // Creates 2D map\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/satellite-streets-v11\",\n      center: [lng, lat],\n      zoom: 13,\n      pitch: 0,\n      tileSize: 256,\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    map.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n\n    // Search option\n    map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n        position: \"bottom-left\",\n      })\n    );\n\n    map.on(\"move\", () => {\n      setLng(map.getCenter().lng.toFixed(5));\n      setLat(map.getCenter().lat.toFixed(5));\n      setZoom(Math.floor(map.getZoom()));\n      //setZoom(map.getZoom().toFixed(3))\n    });\n\n    // Only want to work with the map after it has fully loaded\n    map.on(\"load\", async () => {\n      // Add mapbox terrain dem source for 3d terrain rendering\n      // map.addSource(\"mapbox-dem\", {\n      //   type: \"raster-dem\",\n      //   url: \"mapbox://mapbox.terrain-rgb\",\n      //   tileSize: 256,\n      //   maxZoom: 16,\n      // });\n      // map.setTerrain({\n      //   source: \"mapbox-dem\",\n      //   exaggeration: 1.5,\n      // });\n\n      // Add sky layer\n      map.addLayer({\n        id: \"sky\",\n        type: \"sky\",\n        paint: {\n          \"sky-type\": \"atmosphere\",\n          \"sky-atmosphere-sun\": [0.0, 90.0],\n          \"sky-atmosphere-sun-intensity\": 15,\n        },\n      });\n\n      // Add Fog\n      map.setFog({\n        range: [-0.5, 20],\n        color: \"grey\",\n        \"horizon-blend\": 0.1,\n      });\n      await map.once(\"idle\");\n    });\n\n    // Remove map on unmount\n    return () => map.remove();\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"mapbox_map\" ref={mapContainer}>\n        <div className=\"long_lat_bar\">\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n        </div>\n        <div />\n      </div>\n      <Plane className=\"plane\" lng={lng} lat={lat} zoom={zoom} />\n    </>\n  );\n};\n\nexport default GeoMap;\n","const Locations = () => {\n  return <div> PLACE HOLDER </div>;\n};\n\nexport default Locations;\n","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport userService from \"../../utils/userService\";\nimport GeoMap from \"../../components/2DMap/2DMap\";\nimport Locations from \"../Locations/Locations\";\n\nfunction App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<GeoMap />} />\n\n        <Route\n          path=\"/locations\"\n          element={<Locations user={user} handleLogout={handleLogout} />}\n        />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<GeoMap />} />\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport \"./index.css\";\nimport App from \"./pages/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Router>\n    <App />\n  </Router>\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}